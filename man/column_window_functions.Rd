% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/functions.R,
%   R/rank_function_classes.R
\name{column_window_functions}
\alias{column_window_functions}
\alias{cume_dist,missing-method}
\alias{cume_dist}
\alias{lead,characterOrColumn,numeric-method}
\alias{lead}
\alias{ntile,numeric-method}
\alias{ntile}
\alias{percent_rank,missing-method}
\alias{percent_rank}
\alias{row_number,missing-method}
\alias{row_number}
\alias{rank}
\alias{dense_rank}
\alias{min_rank}
\title{Window functions for Column operations}
\usage{
cume_dist(x = "missing")

lead(x, offset, defaultValue = NULL)

ntile(x)

percent_rank(x = "missing")

row_number(x = "missing")

\S4method{cume_dist}{missing}()

\S4method{lead}{characterOrColumn,numeric}(x, offset = 1, defaultValue = NULL)

\S4method{ntile}{numeric}(x)

\S4method{percent_rank}{missing}()

\S4method{row_number}{missing}()

rank(x, ...)

dense_rank(x, ...)

min_rank(x, ...)
}
\arguments{
\item{x}{a vector or Column object}

\item{offset}{In \code{lag}, the number of rows back from the current row from which to obtain
a value. In \code{lead}, the number of rows after the current row from which to
obtain a value. If not specified, the default is 1.}

\item{defaultValue}{(optional) default to use when the offset row does not exist.}

\item{...}{additional arguments to \code{base::rank}}
}
\description{
Window functions defined for \code{Column}.
}
\details{
\code{cume_dist}: Returns the cumulative distribution of values within a window partition,
i.e. the fraction of rows that are below the current row:
(number of values before and including x) / (total number of rows in the partition).
This is equivalent to the \code{CUME_DIST} function in SQL.
The method should be used with no argument.

\code{lead}: Returns the value that is \code{offset} rows after the current row, and
\code{defaultValue} if there is less than \code{offset} rows after the current row.
For example, an \code{offset} of one will return the next row at any given point
in the window partition.
This is equivalent to the \code{LEAD} function in SQL.

\code{ntile}: Returns the ntile group id (from 1 to n inclusive) in an ordered window
partition. For example, if n is 4, the first quarter of the rows will get value 1, the second
quarter will get 2, the third quarter will get 3, and the last quarter will get 4.
This is equivalent to the \code{NTILE} function in SQL.

\code{percent_rank}: Returns the relative rank (i.e. percentile) of rows within a window
partition.
This is computed by: (rank of row in its partition - 1) / (number of rows in the partition - 1).
This is equivalent to the \code{PERCENT_RANK} function in SQL.
The method should be used with no argument.

\code{row_number}: Returns a sequential number starting at 1 within a window partition.
This is equivalent to the \code{ROW_NUMBER} function in SQL.
The method should be used with no argument.
}
\note{
cume_dist since 1.6.0

lead since 1.6.0

ntile since 1.6.0

percent_rank since 1.6.0

row_number since 1.6.0
}
\examples{
\dontrun{
# Dataframe used throughout this doc
df <- createDataFrame(cbind(model = rownames(mtcars), mtcars))
ws <- orderBy(windowPartitionBy("am"), "hp")
tmp <- mutate(df, dist = over(cume_dist(), ws), dense_rank = over(dense_rank(), ws),
              lag = over(lag(df$mpg), ws), lead = over(lead(df$mpg, 1), ws),
              percent_rank = over(percent_rank(), ws),
              rank = over(rank(), ws), row_number = over(row_number(), ws))
# Get ntile group id (1-4) for hp
tmp <- mutate(tmp, ntile = over(ntile(4), ws))
head(tmp)}
}
\concept{window functions}
