% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/functions.R
\name{abs,Column-method}
\alias{abs,Column-method}
\alias{abs}
\alias{acos,Column-method}
\alias{acos}
\alias{asin,Column-method}
\alias{asin}
\alias{atan,Column-method}
\alias{atan}
\alias{bin,Column-method}
\alias{bin}
\alias{cbrt,Column-method}
\alias{cbrt}
\alias{ceil,Column-method}
\alias{ceil}
\alias{ceiling,Column-method}
\alias{ceiling}
\alias{cos,Column-method}
\alias{cos}
\alias{cosh,Column-method}
\alias{cosh}
\alias{exp,Column-method}
\alias{exp}
\alias{expm1,Column-method}
\alias{expm1}
\alias{floor,Column-method}
\alias{floor}
\alias{hex,Column-method}
\alias{hex}
\alias{log,Column-method}
\alias{log}
\alias{log10,Column-method}
\alias{log10}
\alias{log1p,Column-method}
\alias{log1p}
\alias{log2,Column-method}
\alias{log2}
\alias{rint,Column-method}
\alias{rint}
\alias{round,Column-method}
\alias{round}
\alias{bround,Column-method}
\alias{bround}
\alias{signum,Column-method}
\alias{signum}
\alias{sign,Column-method}
\alias{sign}
\alias{sin,Column-method}
\alias{sin}
\alias{sinh,Column-method}
\alias{sinh}
\alias{sqrt,Column-method}
\alias{sqrt}
\alias{tan,Column-method}
\alias{tan}
\alias{tanh,Column-method}
\alias{tanh}
\alias{toDegrees,Column-method}
\alias{toDegrees}
\alias{toRadians,Column-method}
\alias{toRadians}
\alias{unhex,Column-method}
\alias{unhex}
\alias{atan2,Column-method}
\alias{atan2}
\alias{hypot,Column-method}
\alias{hypot}
\alias{pmod,Column-method}
\alias{pmod}
\alias{shiftLeft,Column,numeric-method}
\alias{shiftLeft}
\alias{shiftRight,Column,numeric-method}
\alias{shiftRight}
\alias{shiftRightUnsigned,Column,numeric-method}
\alias{shiftRightUnsigned}
\alias{conv,Column,numeric,numeric-method}
\alias{conv}
\title{#' Aggregate functions for Column operations
#'
#' Aggregate functions defined for \code{Column}.
#'
#' @param x Column to compute on.
#' @param y,na.rm,use currently not used.
#' @param ... additional argument(s). For example, it could be used to pass additional Columns.
#' @name column_aggregate_functions
#' @rdname column_aggregate_functions
#' @family aggregate functions
#' @examples
#' \dontrun{
#' # Dataframe used throughout this doc
#' df <- createDataFrame(cbind(model = rownames(mtcars), mtcars))}
NULL}
\usage{
bin(x)

bround(x, ...)

cbrt(x)

ceil(x)

conv(x, fromBase, toBase)

hex(x)

hypot(y, x)

pmod(y, x)

rint(x)

shiftLeft(y, x)

shiftRight(y, x)

shiftRightUnsigned(y, x)

signum(x)

toDegrees(x)

toRadians(x)

unhex(x)

\S4method{abs}{Column}(x)

\S4method{acos}{Column}(x)

\S4method{asin}{Column}(x)

\S4method{atan}{Column}(x)

\S4method{bin}{Column}(x)

\S4method{cbrt}{Column}(x)

\S4method{ceil}{Column}(x)

\S4method{ceiling}{Column}(x)

\S4method{cos}{Column}(x)

\S4method{cosh}{Column}(x)

\S4method{exp}{Column}(x)

\S4method{expm1}{Column}(x)

\S4method{floor}{Column}(x)

\S4method{hex}{Column}(x)

\S4method{log}{Column}(x)

\S4method{log10}{Column}(x)

\S4method{log1p}{Column}(x)

\S4method{log2}{Column}(x)

\S4method{rint}{Column}(x)

\S4method{round}{Column}(x)

\S4method{bround}{Column}(x, scale = 0)

\S4method{signum}{Column}(x)

\S4method{sign}{Column}(x)

\S4method{sin}{Column}(x)

\S4method{sinh}{Column}(x)

\S4method{sqrt}{Column}(x)

\S4method{tan}{Column}(x)

\S4method{tanh}{Column}(x)

\S4method{toDegrees}{Column}(x)

\S4method{toRadians}{Column}(x)

\S4method{unhex}{Column}(x)

\S4method{atan2}{Column}(y, x)

\S4method{hypot}{Column}(y, x)

\S4method{pmod}{Column}(y, x)

\S4method{shiftLeft}{Column,numeric}(y, x)

\S4method{shiftRight}{Column,numeric}(y, x)

\S4method{shiftRightUnsigned}{Column,numeric}(y, x)

\S4method{conv}{Column,numeric,numeric}(x, fromBase, toBase)
}
\arguments{
\item{fromBase}{base to convert from.}

\item{toBase}{base to convert to.}

\item{scale}{round to \code{scale} digits to the right of the decimal point when
\code{scale} > 0, the nearest even number when \code{scale} = 0, and \code{scale} digits
to the left of the decimal point when \code{scale} < 0.}
}
\description{
#' Date time functions for Column operations
#'
#' Date time functions defined for \code{Column}.
#'
#' @param x Column to compute on. In \code{window}, it must be a time Column of
#'          \code{TimestampType}. This is not used with \code{current_date} and
#'          \code{current_timestamp}
#' @param format The format for the given dates or timestamps in Column \code{x}. See the
#'               format used in the following methods:
#'               \itemize{
#'               \item \code{to_date} and \code{to_timestamp}: it is the string to use to parse
#'                    Column \code{x} to DateType or TimestampType.
#'               \item \code{trunc}: it is the string to use to specify the truncation method.
#'                    For example, "year", "yyyy", "yy" for truncate by year, or "month", "mon",
#'                    "mm" for truncate by month.
#'               \item \code{date_trunc}: it is similar with \code{trunc}'s but additionally
#'                    supports "day", "dd", "second", "minute", "hour", "week" and "quarter".
#'               }
#' @param ... additional argument(s).
#' @name column_datetime_functions
#' @rdname column_datetime_functions
#' @family data time functions
#' @examples
#' \dontrun{
#' dts <- c("2005-01-02 18:47:22",
#'         "2005-12-24 16:30:58",
#'         "2005-10-28 07:30:05",
#'         "2005-12-28 07:01:05",
#'         "2006-01-24 00:01:10")
#' y <- c(2.0, 2.2, 3.4, 2.5, 1.8)
#' df <- createDataFrame(data.frame(time = as.POSIXct(dts), y = y))}
NULL
}
\details{
#' Date time arithmetic functions for Column operations
#'
#' Date time arithmetic functions defined for \code{Column}.
#'
#' @param y Column to compute on.
#' @param x For class \code{Column}, it is the column used to perform arithmetic operations
#'          with column \code{y}. For class \code{numeric}, it is the number of months or
#'          days to be added to or subtracted from \code{y}. For class \code{character}, it is
#'          \itemize{
#'          \item \code{date_format}: date format specification.
#'          \item \code{from_utc_timestamp}, \code{to_utc_timestamp}: time zone to use.
#'          \item \code{next_day}: day of the week string.
#'          }
#'
#' @name column_datetime_diff_functions
#' @rdname column_datetime_diff_functions
#' @family data time functions
#' @examples
#' \dontrun{
#' dts <- c("2005-01-02 18:47:22",
#'         "2005-12-24 16:30:58",
#'         "2005-10-28 07:30:05",
#'         "2005-12-28 07:01:05",
#'         "2006-01-24 00:01:10")
#' y <- c(2.0, 2.2, 3.4, 2.5, 1.8)
#' df <- createDataFrame(data.frame(time = as.POSIXct(dts), y = y))}
NULL

#' Math functions for Column operations
#'
#' Math functions defined for \code{Column}.
#'
#' @param x Column to compute on. In \code{shiftLeft}, \code{shiftRight} and
#'          \code{shiftRightUnsigned}, this is the number of bits to shift.
#' @param y Column to compute on.
#' @param ... additional argument(s).
#' @name column_math_functions
#' @rdname column_math_functions
#' @family math functions
#' @examples
#' \dontrun{
#' # Dataframe used throughout this doc
#' df <- createDataFrame(cbind(model = rownames(mtcars), mtcars))
#' tmp <- mutate(df, v1 = log(df$mpg), v2 = cbrt(df$disp),
#'                   v3 = bround(df$wt, 1), v4 = bin(df$cyl),
#'                   v5 = hex(df$wt), v6 = toDegrees(df$gear),
#'                   v7 = atan2(df$cyl, df$am), v8 = hypot(df$cyl, df$am),
#'                   v9 = pmod(df$hp, df$cyl), v10 = shiftLeft(df$disp, 1),
#'                   v11 = conv(df$hp, 10, 16), v12 = sign(df$vs - 0.5),
#'                   v13 = sqrt(df$disp), v14 = ceil(df$wt))
#' head(tmp)}
NULL

#' String functions for Column operations
#'
#' String functions defined for \code{Column}.
#'
#' @param x Column to compute on except in the following methods:
#'      \itemize{
#'      \item \code{instr}: \code{character}, the substring to check. See 'Details'.
#'      \item \code{format_number}: \code{numeric}, the number of decimal place to
#'           format to. See 'Details'.
#'      }
#' @param y Column to compute on.
#' @param ... additional Columns.
#' @name column_string_functions
#' @rdname column_string_functions
#' @family string functions
#' @examples
#' \dontrun{
#' # Dataframe used throughout this doc
#' df <- createDataFrame(as.data.frame(Titanic, stringsAsFactors = FALSE))}
NULL

#' Non-aggregate functions for Column operations
#'
#' Non-aggregate functions defined for \code{Column}.
#'
#' @param x Column to compute on. In \code{lit}, it is a literal value or a Column.
#'          In \code{expr}, it contains an expression character object to be parsed.
#' @param y Column to compute on.
#' @param ... additional Columns.
#' @name column_nonaggregate_functions
#' @rdname column_nonaggregate_functions
#' @seealso coalesce,SparkDataFrame-method
#' @family non-aggregate functions
#' @examples
#' \dontrun{
#' # Dataframe used throughout this doc
#' df <- createDataFrame(cbind(model = rownames(mtcars), mtcars))}
NULL

#' Miscellaneous functions for Column operations
#'
#' Miscellaneous functions defined for \code{Column}.
#'
#' @param x Column to compute on. In \code{sha2}, it is one of 224, 256, 384, or 512.
#' @param y Column to compute on.
#' @param ... additional Columns.
#' @name column_misc_functions
#' @rdname column_misc_functions
#' @family misc functions
#' @examples
#' \dontrun{
#' # Dataframe used throughout this doc
#' df <- createDataFrame(cbind(model = rownames(mtcars), mtcars)[, 1:2])
#' tmp <- mutate(df, v1 = crc32(df$model), v2 = hash(df$model),
#'                   v3 = hash(df$model, df$mpg), v4 = md5(df$model),
#'                   v5 = sha1(df$model), v6 = sha2(df$model, 256))
#' head(tmp)}
NULL

#' Collection functions for Column operations
#'
#' Collection functions defined for \code{Column}.
#'
#' @param x Column to compute on. Note the difference in the following methods:
#'          \itemize{
#'          \item \code{to_json}: it is the column containing the struct, array of the structs,
#'              the map or array of maps.
#'          \item \code{from_json}: it is the column containing the JSON string.
#'          }
#' @param y Column to compute on.
#' @param value A value to compute on.
#'          \itemize{
#'          \item \code{array_contains}: a value to be checked if contained in the column.
#'          \item \code{array_position}: a value to locate in the given array.
#'          \item \code{array_remove}: a value to remove in the given array.
#'          }
#' @param ... additional argument(s). In \code{to_json} and \code{from_json}, this contains
#'            additional named properties to control how it is converted, accepts the same
#'            options as the JSON data source.  In \code{arrays_zip}, this contains additional
#'            Columns of arrays to be merged.
#' @name column_collection_functions
#' @rdname column_collection_functions
#' @family collection functions
#' @examples
#' \dontrun{
#' # Dataframe used throughout this doc
#' df <- createDataFrame(cbind(model = rownames(mtcars), mtcars))
#' tmp <- mutate(df, v1 = create_array(df$mpg, df$cyl, df$hp))
#' head(select(tmp, array_contains(tmp$v1, 21), size(tmp$v1), shuffle(tmp$v1)))
#' head(select(tmp, array_max(tmp$v1), array_min(tmp$v1), array_distinct(tmp$v1)))
#' head(select(tmp, array_position(tmp$v1, 21), array_repeat(df$mpg, 3), array_sort(tmp$v1)))
#' head(select(tmp, flatten(tmp$v1), reverse(tmp$v1), array_remove(tmp$v1, 21)))
#' tmp2 <- mutate(tmp, v2 = explode(tmp$v1))
#' head(tmp2)
#' head(select(tmp, posexplode(tmp$v1)))
#' head(select(tmp, slice(tmp$v1, 2L, 2L)))
#' head(select(tmp, sort_array(tmp$v1)))
#' head(select(tmp, sort_array(tmp$v1, asc = FALSE)))
#' tmp3 <- mutate(df, v3 = create_map(df$model, df$cyl))
#' head(select(tmp3, map_keys(tmp3$v3), map_values(tmp3$v3)))
#' head(select(tmp3, element_at(tmp3$v3, "Valiant")))
#' tmp4 <- mutate(df, v4 = create_array(df$mpg, df$cyl), v5 = create_array(df$cyl, df$hp))
#' head(select(tmp4, concat(tmp4$v4, tmp4$v5), arrays_overlap(tmp4$v4, tmp4$v5)))
#' head(select(tmp4, array_except(tmp4$v4, tmp4$v5), array_intersect(tmp4$v4, tmp4$v5)))
#' head(select(tmp4, array_union(tmp4$v4, tmp4$v5)))
#' head(select(tmp4, arrays_zip(tmp4$v4, tmp4$v5), map_from_arrays(tmp4$v4, tmp4$v5)))
#' head(select(tmp, concat(df$mpg, df$cyl, df$hp)))
#' tmp5 <- mutate(df, v6 = create_array(df$model, df$model))
#' head(select(tmp5, array_join(tmp5$v6, "#"), array_join(tmp5$v6, "#", "NULL")))}
NULL

#' Window functions for Column operations
#'
#' Window functions defined for \code{Column}.
#'
#' @param x In \code{lag} and \code{lead}, it is the column as a character string or a Column
#'          to compute on. In \code{ntile}, it is the number of ntile groups.
#' @param offset In \code{lag}, the number of rows back from the current row from which to obtain
#'               a value. In \code{lead}, the number of rows after the current row from which to
#'               obtain a value. If not specified, the default is 1.
#' @param defaultValue (optional) default to use when the offset row does not exist.
#' @param ... additional argument(s).
#' @name column_window_functions
#' @rdname column_window_functions
#' @family window functions
#' @examples
#' \dontrun{
#' # Dataframe used throughout this doc
#' df <- createDataFrame(cbind(model = rownames(mtcars), mtcars))
#' ws <- orderBy(windowPartitionBy("am"), "hp")
#' tmp <- mutate(df, dist = over(cume_dist(), ws), dense_rank = over(dense_rank(), ws),
#'               lag = over(lag(df$mpg), ws), lead = over(lead(df$mpg, 1), ws),
#'               percent_rank = over(percent_rank(), ws),
#'               rank = over(rank(), ws), row_number = over(row_number(), ws))
#' # Get ntile group id (1-4) for hp
#' tmp <- mutate(tmp, ntile = over(ntile(4), ws))
#' head(tmp)}


\code{abs}: Computes the absolute value.

\code{acos}: Returns the inverse cosine of the given value,
as if computed by \code{java.lang.Math.acos()}

\code{asin}: Returns the inverse sine of the given value,
as if computed by \code{java.lang.Math.asin()}

\code{atan}: Returns the inverse tangent of the given value,
as if computed by \code{java.lang.Math.atan()}

\code{bin}: Returns the string representation of the binary value
of the given long column. For example, bin("12") returns "1100".

\code{cbrt}: Computes the cube-root of the given value.

\code{ceil}: Computes the ceiling of the given value.

\code{ceiling}: Alias for \code{ceil}.

\code{cos}: Returns the cosine of the given value,
as if computed by \code{java.lang.Math.cos()}. Units in radians.

\code{cosh}: Returns the hyperbolic cosine of the given value,
as if computed by \code{java.lang.Math.cosh()}.

\code{exp}: Computes the exponential of the given value.

\code{expm1}: Computes the exponential of the given value minus one.

\code{floor}: Computes the floor of the given value.

\code{hex}: Computes hex value of the given column.

\code{log}: Computes the natural logarithm of the given value.

\code{log10}: Computes the logarithm of the given value in base 10.

\code{log1p}: Computes the natural logarithm of the given value plus one.

\code{log2}: Computes the logarithm of the given column in base 2.

\code{rint}: Returns the double value that is closest in value to the argument and
is equal to a mathematical integer.

\code{round}: Returns the value of the column rounded to 0 decimal places
using HALF_UP rounding mode.

\code{bround}: Returns the value of the column \code{e} rounded to \code{scale} decimal places
using HALF_EVEN rounding mode if \code{scale} >= 0 or at integer part when \code{scale} < 0.
Also known as Gaussian rounding or bankers' rounding that rounds to the nearest even number.
bround(2.5, 0) = 2, bround(3.5, 0) = 4.

\code{signum}: Computes the signum of the given value.

\code{sign}: Alias for \code{signum}.

\code{sin}: Returns the sine of the given value,
as if computed by \code{java.lang.Math.sin()}. Units in radians.

\code{sinh}: Returns the hyperbolic sine of the given value,
as if computed by \code{java.lang.Math.sinh()}.

\code{sqrt}: Computes the square root of the specified float value.

\code{tan}: Returns the tangent of the given value,
as if computed by \code{java.lang.Math.tan()}.
Units in radians.

\code{tanh}: Returns the hyperbolic tangent of the given value,
as if computed by \code{java.lang.Math.tanh()}.

\code{toDegrees}: Converts an angle measured in radians to an approximately equivalent angle
measured in degrees.

\code{toRadians}: Converts an angle measured in degrees to an approximately equivalent angle
measured in radians.

\code{unhex}: Inverse of hex. Interprets each pair of characters as a hexadecimal number
and converts to the byte representation of number.

\code{atan2}: Returns the angle theta from the conversion of rectangular coordinates
(x, y) to polar coordinates (r, theta),
as if computed by \code{java.lang.Math.atan2()}. Units in radians.

\code{hypot}: Computes "sqrt(a^2 + b^2)" without intermediate overflow or underflow.

\code{pmod}: Returns the positive value of dividend mod divisor.
Column \code{x} is divisor column, and column \code{y} is the dividend column.

\code{shiftLeft}: Shifts the given value numBits left. If the given value is a long value,
this function will return a long value else it will return an integer value.

\code{shiftRight}: (Signed) shifts the given value numBits right. If the given value is a long
value, it will return a long value else it will return an integer value.

\code{shiftRightUnsigned}: (Unigned) shifts the given value numBits right. If the given value is
a long value, it will return a long value else it will return an integer value.

\code{conv}: Converts a number in a string column from one base to another.
}
\note{
abs since 1.5.0

acos since 1.5.0

asin since 1.5.0

atan since 1.5.0

bin since 1.5.0

cbrt since 1.4.0

ceil since 1.5.0

ceiling since 1.5.0

cos since 1.5.0

cosh since 1.5.0

exp since 1.5.0

expm1 since 1.5.0

floor since 1.5.0

hex since 1.5.0

log since 1.5.0

log10 since 1.5.0

log1p since 1.5.0

log2 since 1.5.0

rint since 1.5.0

round since 1.5.0

bround since 2.0.0

signum since 1.5.0

sign since 1.5.0

sin since 1.5.0

sinh since 1.5.0

sqrt since 1.5.0

tan since 1.5.0

tanh since 1.5.0

toDegrees since 1.4.0

toRadians since 1.4.0

unhex since 1.5.0

atan2 since 1.5.0

hypot since 1.4.0

pmod since 1.5.0

shiftLeft since 1.5.0

shiftRight since 1.5.0

shiftRightUnsigned since 1.5.0

conv since 1.5.0
}
